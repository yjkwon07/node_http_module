1. Node.js MySQL 모듈의 기본 사용방법 =>
https://github.com/mysqljs/mysql

trouble shooting!! 
https://www.digitalocean.com/community/tutorials/how-to-create-a-new-user-and-grant-permissions-in-mysql
create user !! =>
    create user 'nodejs'@'%' identified by '111111';
    select user, host from mysql.user;
                            (database).(table)
    grant all privileges on B_board.* TO 'nodejs'@'%';

2. MySQL로 홈페이지 구현 => 
MySQL을 이용해서 Node.js 애플리케이션의 홈페이지를 구현하는 방법을 알아보겠습니다.
 db.query(`SELECT * FROM topic`, (_error, topics) => {});

3. MySQL로 상세보기 구현 => 
MySQL을 이용해서 글 상세보기 기능을 구현하는 방법을 살펴보겠습니다. 
? => 사용자의 입력 값 중 공격 가능한 쿼리문이었을 때 자동으로 필터처리를 하는 기능이다. 
so what? => sanitize-html을 사용 안 해두 된다.

4. MySQL로 글생성 기능 구현
MySQL을 이용해서 글 추가 기능을 구현하는 방법을 살펴보겠습니다. 

INSERT INTO topic (title, description, created, author_id) 
            VALUES(?, ?, NOW(), ?)`, [post.title, post.description, 1],

5. MySQL로 글수정 기능 구현
Node.js 웹앱의 글 수정 기능을 MySQL로 구현하는 방법을 소개합니다. 

db.query('UPDATE topic SET title=?, description=?, author_id=1 WHERE id=?', 
                                [post.title, post.description, post.id],

6. MySQL로 글 삭제 기능 구현
Node.js 앱의 글 삭제 기능을 MySQL로 구현하는 방법을 살펴보겠습니다. 

db.query(`DELETE FROM topic WHERE id = ?`, [post.id], 

7. MySQL join을 이용해서 상세보기 구현 =>
MySQL의 JOIN을 이용해서 Node.js 웹앱의 상세보기 기능을 구현하는 방법을 알아보겠습니다. 

db.query(`SELECT * FROM topic LEFT JOIN author ON topic.author_id=author.id WHERE topic.id=?`,
                         [queryData.id], function (error2, topic) {

8. MySQL join을 이용해서 글생성 구현 =>
MySQL의 join을 이용해서 Node.js 웹앱의 글 생성 기능을 구현하는 방법을 살펴보겠습니다. 

select 콤보박스 구성 (template.js)

9. MySQL join을 이용해서 글수정 구현 =>
MySQL JOIN을 이용해서 Node.js 웹앱의 글 수정 기능 구현
 
 ${template.authorSelect(authors, topic[0].author_id)}

10. Node.js의 DB 설정정보 정리정돈 =>
Node.js 웹앱에서 데이터베이스의 설정정보를 별도의 파일로 분리하는 방법에 대해서 소개해드립니다. 

./lib/db.js
sanitize-html[delete]

11. Node.js 코드의 정리정돈 (topic) =>
Node.js 웹앱의 코드를 정리 정돈하는 방법에 대한 수업입니다. 

12. 저자 목록 보기 기능 구현 =>
저자 목록을 보여주는 기능을 구현해보겠습니다. 
template create -> authorTable

13. 저자 생성 기능 구현 =>
저자 생성 기능을 구현하는 방법을 알아보겠습니다.

14. 저자 수정 기능 구현 =>
update

15. 저자 삭제 기능 구현 => 
 삭제작업은 form post방식으로 무조건 처리를 해야 한다. 

16. 보안 - SQL Injection
공격의 의도를 가진 SQL 코드를 주입함으로서 공격 목적을 달성하는 기법을 SQL Injection이라고 합니다. 여기서는 이 공격기법을 소개한 후에 Node.js 애플리케이션에서 어떻게 방어하는지를 알려드립니다.
? => query 보안성 높다 .
select * from topic LEFT join author on topic.author_id =  author.id where topic.id='1;drop table topic;'

multipleStatements : true -> 위험!!!
db.escape(queryData.id) !! -> 문자열로 바꿔줌

17. 보안 - Escaping
공격의 의도를 가진 자바스크립트 코드를 입력해서 이 코드를 웹 브라우저로 실행할 때 공격목적을 달성하는 공격 기법을 Cross site scripting (XSS) 이라고 합니다. 이를 막는 방법을 살펴보겠습니다. 

sanitize!!!!



















