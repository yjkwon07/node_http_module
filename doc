1. Node.js - NodeJs는 사용자에게 전송할 데이터를 생성한다.

2. Node.js - URL로 입력된 값 사용하기 => node url parse query string

3. App - 동적인 웹페이지 만들기 => Template Literal 

4. App - 파일 읽기 => fs
    CRUD
    - Create
    - Read
    - Update
    - Delte

5. App - 파일을 이용해 본문 구현  => fs 

6. Node.js - 콘솔에서의 입력값 => process.argv;

7. App - Not found 오류 구현 => pathname

8. Node.js - data의 값이 없다면? => 만약 id의 값이 없다면 undefind로 출력이 나온다.
    해결점: if queryData.id === undefined

9. App - 글목록 출력하기 => fs.readdir

10. App -함수를 이용해서 정리 정돈하기 => function

11. Node.js - 동기와 비동기 그리고 콜백 => readFileSync

12. Node.js - 패키지 매니저와 PM2 => npm install pm2 -g
    pm2 start [.js]
    pm2 stop
    pm2 list 
    pm2 log
    pm2 monit
    pm2 kill : pm2로 실행한 모든 프로세스를 중지 & 삭제 합니다. 
    pm2 start main.js --watch --ignore-watch="data/* sessions/*"  --no-daemon 
    pm2를 실행하면서 로그가 출력되도록 합니다. 
    (--no-daemon) 또 특정 디랙토리에 대한 watch를 하지 않도록 하는 방법입니다

    ***
    --ignore-watch 해결방법
    pm2 init 혹은 pm2 ecosystem을 입력해주면 ecosystem.config.js 파일이 생성됩니다.
    pm2 설정파일 생성 사이트링크 : http://pm2.keymetrics.io......on/
    apps 설정부분에 ignore_watch: ["data/*", "sessions/*"]를 추가해주시면 해결됩니다
    ***

13. App - 글생성 UI 만들기 => create 분기문/ form tag생성

14. POST 방식으로 전송된 데이터 받기 => 
    웹브라우저가 post방식으로 데이터를 전송할 때 데이터가
    엄청나게 많으면 그 데이터를 한 번에 처리하여 받아간다면
    다운 문제가 발생할 수 있다.
    Node에서는 이 post방식으로 전송되는 데이터가 많을 경우를 대비해서 
    데이터를 조각조각 받게한다. 
    
    request.on('datat' , () =>{})
    end에 해당되는 콜백이 실행됐을 때 정보 수신이 끝났다.    
    request.on('end' , () =>{})


15. App - 파일생성과 리다이렉션 =>
    전송된 POST 데이터를 받아서 파일에 저장하고, 
    그 결과 페이지로 리다이렉션하는 방법에 대해서 알아보겠습니다.

16. App - 글수정 - 수정 링크 생성 => 
    글 수정 기능을 구현하기 위해서 수정 링크를 추가하는 법을 살펴봅니다. 

17. App - 글수정 - 수정할 정보 전송 =>
    수정할 내용을 서버로 전송하는 법을 살펴봅니다.

18. 글수정 - 수정된 내용 저장 =>

fs.rename(`./data/${id}`, `data/${title}`, function(error){
                fs.writeFile(`data/${title}`, description, 'utf8', function(err){
                  response.writeHead(302, {Location: `/?id=${title}`});
                  response.end();
                })
        });

19. App - 글삭제 - 삭제버튼 구현 => 
    삭제 작업을 하기 위해서는 삭제 버튼이 있어야 합니다. 
    이 때 링크를 사용하는 안됩니다. 
    링크 대신 form을 이용해서 삭제 버튼을 만드는 방법을 살펴보겠습니다. 

20. App -객체를 이용해서 템플릿 기능 정리 정돈하기 => 
    객체를 이용해서 탬플릿 기능을 정리 정돈하는 법을 소개합니다. 

21. Node.js - 모듈의 형식 => 
    많아진 코드를 정리 정돈하는 가장 큰 도구인 모듈의 형식을 살펴보겠습니다. 
    mpart.js

22. App 제작 - 모듈의 활용 =>
    입력정보와 관련해서 보안적으로 처리해야 할 이슈를 살펴보겠습니다.  

23. App - 입력 정보에 대한 보안 => 
    데이터를 읽어 올 때, 파일의 아이디를 가져온다. 
    하지만 사용자가 ../같이 상위 디렉토리 탐색 문구를 넣게 되면 
    사용자에게 서버의 파일을 읽어들일 수 있는 심각한 문제가 있다.
    작은 해결 => path.parse()

24. App - 출력정보에 대한 보안 => XSS
  sanitize-html using

25. API => Application Programming Interface
    API라는 중요한 개념의 의미를 알아보고, 지금까지 베일에 쌓여있었던 createServer API의 의미를 살펴보겠습니다







